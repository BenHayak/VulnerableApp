package org.sasanlabs.service.vulnerability.commandInjection;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.function.Supplier;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sasanlabs.internal.utility.LevelConstants;
import org.sasanlabs.internal.utility.annotations.AttackVector;
import org.sasanlabs.internal.utility.annotations.VulnerableAppRequestMapping;
import org.sasanlabs.internal.utility.annotations.VulnerableAppRestController;
import org.sasanlabs.service.vulnerability.bean.GenericVulnerabilityResponseBean;
import org.sasanlabs.vulnerability.types.VulnerabilityType;
import org.springframework.http.HttpStatus;
import org.springframework.http.RequestEntity;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestParam;


/**
 * This class contains vulnerabilities related to Command Injection. <a
 * href="https://owasp.org/www-community/attacks/Command_Injection">For More information</a>
 *
 * @author KSASAN preetkaran20@gmail.com
 */
 @VulnerableAppRestController(descriptionLabel = "COMMAND_INJECTION_VULNERABILITY", value = "CommandInjection")
public class CommandInjection {

    private static final String IP_ADDRESS = "ipaddress";
    private static final Pattern SEMICOLON_SPACE_LOGICAL_AND_PATTERN = Pattern.compile("[;& ]");
    private static final Pattern IP_ADDRESS_PATTERN =
            Pattern.compile("\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b");

    StringBuilder getResponseFromPingCommand(String ipAddress, boolean isValid) throws IOException {
        boolean isWindows = System.getProperty("os.name").toLowerCase().startsWith("windows");
        StringBuilder stringBuilder = new StringBuilder();
        if (isValid) {
            Process process;
            if (!isWindows) {
                process =
                        new ProcessBuilder(new String[] {"sh", "-c", "ping -c 2 " + ipAddress})
                                .redirectErrorStream(true)
                                .start();
            } else {
                process =
                        new ProcessBuilder(new String[] {"cmd", "/c", "ping -n 2 " + ipAddress})
                                .redirectErrorStream(true)
                                .start();
            }
            BufferedReader bufferedReader = null;
            try {
                bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                bufferedReader.lines().forEach(val -> stringBuilder.append(val));
            } finally {
                if (bufferedReader != null) {
                    try {
                        bufferedReader.close();
                    } catch (IOException e) {
                        // Handle the exception, or log it if necessary
                        e.printStackTrace();
                    }
                }
            }
        }
        return stringBuilder;
    }
    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_1, htmlTemplate = "LEVEL_1/CI_Level1")
    public String getVulnerablePayloadLevel1(
            String ipAddress) throws IOException {
        boolean validator = StringUtils.isNotBlank(ipAddress);
        return getResponseFromPingCommand(ipAddress, validator).toString();
    }

    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_1, htmlTemplate = "LEVEL_1/CI_Level5")
    public String getVulnerablePayloadLevel5(String ipAddress)
            throws IOException {
        boolean validator = StringUtils.isNotBlank(ipAddress)
                                && !SEMICOLON_SPACE_LOGICAL_AND_PATTERN
                                        .matcher(ipAddress)
                                        .find()
                                && !ipAddress.toUpperCase().contains("%26")
                                && !ipAddress.toUpperCase().contains("%3B")
                                && !ipAddress.toUpperCase().contains("%7C");

        return getResponseFromPingCommand(ipAddress, validator).toString();
    }
}
