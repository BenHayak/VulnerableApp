package org.sasanlabs.service.vulnerability.ssrf;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLConnection;
import java.util.stream.Collectors;
import java.util.stream.Collector;
import java.util.stream.Stream;
import java.io.InputStream;
import java.util.stream.Collectors;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.sasanlabs.internal.utility.LevelConstants;
import org.sasanlabs.internal.utility.Variant;
import org.sasanlabs.internal.utility.annotations.AttackVector;
import org.sasanlabs.internal.utility.annotations.VulnerableAppRequestMapping;
import org.sasanlabs.internal.utility.annotations.VulnerableAppRestController;
import org.sasanlabs.service.vulnerability.bean.GenericVulnerabilityResponseBean;
import org.sasanlabs.vulnerability.types.VulnerabilityType;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestParam;


/**
 * This class contains vulnerabilities related to SSRF.
 *
 * @author GitHub : gled02
 */
 @VulnerableAppRestController(descriptionLabel = "SSRF_VULNERABILITY", value = "SSRFVulnerability")
public class SSRFVulnerability {

    private static final String FILE_URL = "fileurl";

    private static final String FILE_PROTOCOL = "file://";

    private final String gistUrl;


    public SSRFVulnerability() {
        gistUrl = "https://gist.githubusercontent.com";
    }


    public SSRFVulnerability(String gistId) {
        gistUrl = "https://gist.githubusercontent.com/raw/" + gistId;
    }

    private static final transient Logger LOGGER = LogManager.getLogger(SSRFVulnerability.class);

    private boolean isUrlValid(String url) {
        try {
            URL obj = new URL(url);
            obj.toURI();
            return true;
        } catch (Exception e) {
            LOGGER.error("Provided URL: {} is not valid and following exception occured", url, e);
            return false;
        }
    }

    private String invalidUrlResponse() {
        return new ResponseEntity(new GenericVulnerabilityResponseBean("Provided URL not valid", false), "OK").toString();
    }

    private String getGenericVulnerabilityResponseWhenURL(String url) throws Exception {
        if (isUrlValid(url)) {
            URL u = new URL(url);
            if (!MetaDataServiceMock.isPresent(u)) {
                String metaDataServiceMockResponse = MetaDataServiceMock.getResponse(u);
                return metaDataServiceMockResponse;
            } else {
                return getResponseForURLConnection(u);
            }
        } else {
            return invalidUrlResponse();
        }
    }

    String getResponseForURLConnection(URL u) throws Exception {
        URLConnection urlConnection = u.openConnection();
        BufferedReader reader = null;
        String result = null;
        try {
            reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
            Stream<String> lines = reader.lines();
            StringBuilder stringBuilder = new StringBuilder();
            for (String line : (Iterable<String>) lines::iterator) {
                stringBuilder.append(line).append("\n");
            }
            return stringBuilder.toString();
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                if (reader != null) {
                    reader.close();
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        return null;
    }

    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_1, htmlTemplate = "LEVEL_1/SSRF")
    public String getVulnerablePayloadLevel1(String url) throws Exception {
        if (isUrlValid(url)) {
            return getGenericVulnerabilityResponseWhenURL(url);
        } else {
            return invalidUrlResponse();
        }
    }
    
    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_2, htmlTemplate = "LEVEL_1/SSRF")
    public String getVulnerablePayloadLevel2(String url) throws Exception {
        if (isUrlValid(url) && !url.startsWith(FILE_PROTOCOL)) {
            return getGenericVulnerabilityResponseWhenURL(url);
        } else {
            return invalidUrlResponse();
        }
    }

    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_3, htmlTemplate = "LEVEL_1/SSRF")
    public String getVulnerablePayloadLevel3(String url) throws Exception {
        if (isUrlValid(url) && !url.startsWith(FILE_PROTOCOL)) {
            return getGenericVulnerabilityResponseWhenURL(url);
        } else {
            return this.invalidUrlResponse();
        }
    }

    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_5, htmlTemplate = "LEVEL_1/SSRF")
    public String getVulnerablePayloadLevel5(String url) throws Exception {
        if (gistUrl.equalsIgnoreCase(url)) {
            return getGenericVulnerabilityResponseWhenURL(url);
        } else {
            return this.invalidUrlResponse();
        }
    }
}
